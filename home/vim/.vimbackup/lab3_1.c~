/**
 *        Name:  James choi
 *      Lab #3:  Procedure Part 1
 * Description:
 **/

#include "msp430g2452.h"
#include "stdio.h"
#include "string.h"

#include "../header/UART_Ctrl.h" // Include UART_Ctrl funcs.provided




unsigned char getValidInput(void);
void toBinary(int n);
int toValue(unsigned char c);
void toBinaryW(int n);
int asciiToValue(int n);


int main(void){
    volatile unsigned char a;
    volatile unsigned char b;   // volatile to prevent optimization
    volatile unsigned char c;
    volatile unsigned char h;
    WDTCTL = WDTPW + WDTHOLD;   // Stop watchdog timer
    Init_UART();                // Intialize UART for hyperterminal

    for(;;){
        a = asciiToValue(getValidInput());
        b = asciiToValue(getValidInput());
        OUTA_UART(CR);
        OUTA_UART(LF);
        OUTA_UART(a*16+b);
        OUTA_UART(LF);
        OUTA_UART(CR);
    }
}

void toBinary(int n){
    if ( n <= 0 ){
        return ;
    }
    else{
        toBinary(n/2);
        OUTA_UART(n%2+0x30);
    }
}

void toBinaryW(int n){
    int k = 0 ;
    if ( n == 0 ){
        k = 4 ;
    }
    else if ( n == 1 ){
        k = 3 ;
    }
    else if ( n == 2 || n == 3){
        k = 2;
    }
    else if ( n > 3 && n < 8 ){
        k = 1 ;
    }
    else{
        k = 0 ;
    }
    int i = 0 ;
    for ( i = 0 ; i < k ; i++){
        OUTA_UART(0x30);
    }
    toBinary(n);
}

int asciiToValue(int n){
    if ( n > 0x2F && n < 0x3A ){
        return n-0x30 ;
    }
    else {
        return n-0x37;
    }
}


unsigned char getValidInput(void){
    unsigned char a = 0x00 ;
    // while a isn't a valid hex digit ( character 0-9 or character A-F or a-f )
    while (1){
        // get a char
        a = INCHAR_UART();
        /* Check if the chracter in a, is 0-9 or A-F or a-f */
        // If 0-9
        if ( a > 0x2F && a < 0x40 ) {
            OUTA_UART(a);
            return a;
        }
        // elif A-F
        else if ( a > 0x40 && a < 0x47 ){
            OUTA_UART(a);
            return a ;
        }
        // elif a-f
        else if ( a > 0x60 && a < 0x67 ){
            OUTA_UART(a-0x20);
            return a-0x20 ;
        }
        // Reset a and reiterate
        else {
            a = 0x00 ;
        }
    }

}
