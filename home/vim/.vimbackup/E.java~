/**
 * James Choi
 * Computer-Science II - Tues/Thurs 1:30PM
 * Assignment #2
 */
import java.io.*;
import java.util.*;

public class E{

	public static int mcss_cubed(int [] array) {
		int max = 0;

		for (int i = 0; i < array.length; i++) {
			for (int j = i; j < array.length; j++) {
				int sum = 0;

				for (int k = i; k <= j; k++)
					sum += array[k];

				if (sum > max)
					max = sum;
			}
		}
		return max;
	}

	public static int mcss_squared(int [] array) {
		int max = 0;

		for (int i = 0; i < array.length; i++) {
			int sum = 0;
			for (int j = i; j < array.length; j++) {
				sum += array[j];

				if (sum > max)
					max = sum;
			}
		}
		return max;
	}

	public static int mcss_linear(int [] array) {
		int max = 0, sum = 0;

		for (int i = 0; i < array.length; i++) {
			sum += array[i];

			if (sum > max)
				max = sum;
			else if (sum < 0)
				sum = 0;
		}
		return max;
	}


	public static void readIn(String filename){
	    try{
	        Scanner scan = new Scanner(new FileReader(filename)); // Read from input stream
	        // read the first line containing number of testcases
	        int numCases = Integer.parseInt(scan.nextLine().split("\\s+")[0]);
	        int[] array ;
	        for ( int j = 0  ; j < numCases ; j++ ){
	            // make temp string array and read into it
                String[] testCase = scan.nextLine().split("\\s+");
                // Init int array
                array = new int[testCase.length-1];
                for ( int i = 1 ; i < testCase.length ; i++ ){
                    array[i-1] = Integer.parseInt(testCase[i]);
                }
                runTest(array,50);
	        }


	    }catch(IOException ex){
            System.out.println("ERROR IOException");
	    }
	}

	public static void runTest(int[] array, int numTimes){
	    double[] avg = new double[3];
	    long start;
	    long end ;
	    int sol = 0;
        //----------------------------------------------------------
	    start = System.nanoTime();
	    for ( int i = 0 ; i < numTimes ; i++ ){
	        mcss_cubed(array);
	    }
	    end = System.nanoTime();
        avg[0] = (((end - start) / 1000000.0) / numTimes)*1000000.0 ;

        //----------------------------------------------------------
	    start = System.nanoTime();
	    for ( int i = 0 ; i < numTimes ; i++ ){
	        mcss_squared(array);
	    }
	    end = System.nanoTime();
        avg[1] = (((end - start) / 1000000.0) / numTimes)*1000000.0 ;

        //----------------------------------------------------------
	    start = System.nanoTime();
	    for ( int i = 0 ; i < numTimes ; i++ ){
	        sol = mcss_linear(array);
	    }
	    end = System.nanoTime();
        avg[2] = (((end - start) / 1000000.0) / numTimes)*1000000.0 ;

        System.out.println(sol+" "+String.format("%.0f",avg[0])+" "+String.format("%.0f",avg[1])+" "+String.format("%.0f",avg[2]));
	}
	public static void main(String [] args) {
		//readIn("mcss.txt");
        int[] cubeN   = {125,250,500,1000,2000};
        int[] squareN = {25000,50000,100000,200000,400000,800000};
        int[] linearN = {100000, 200000, 400000, 800000, 1600000, 3200000, 6400000};

        double avg ;
        for ( int i = 0  ; i < cubeN.length ; i++ ){
            int[] array = new int[cubeN[i]];

            for ( int k = 0 ; k < cubeN[i] ; k++ ){
                array[k] = (int)(Math.random()*2001)-1000;
            }

            final long start = System.nanoTime();
            for ( int j = 0 ; j <  10 ; j++ ){
                mcss_linear(array);
            }
            final long end = System.nanoTime();

            avg = (((end - start) / 1000000.0) / 10 )*1000000.0 ;
            System.out.println("N: "+cubeN[i]+" No. Runs:10 "+" Time: "+Math.pow(10,9)*(((end - start) / 1000000.0) / cubeN[i])) ;

        }

	}
}
