; James choi
; Lab #2 Part 2.2D
;---------------------------------------------------------------------------------------------------------
;           Enable C-Headers
;---------------------------------------------------------------------------------------------------------
        .cdecls C,LIST,"msp430fg4618.h"


;---------------------------------------------------------------------------------------------------------
;           Assembler Directives Setup
;---------------------------------------------------------------------------------------------------------
        .bss label, 4           ; Reserve 4 unitialized bytes in .bss section (located in RAM)
        .word 0x1234            ;
        .byte 0x0d, 0x0a
        .byte 0x00

        .sect   ".const"        ; This section are for constants
sw0_0   .string "SW1 = 0, SW2 = 0"       ; String for if SW0 is on 
sw0_1   .string "SW1 = 0, SW2 = 1"       ; String for if SW0 is off
sw1_0   .string "SW1 = 1, SW2 = 0"       ; String for if SW1 is on
sw1_1   .string "SW1 = 1, SW2 = 1"       ; String for if SW1 is off

        .byte 0x0d, 0x0a
        .byte 0x00

;---------------------------------------------------------------------------------------------------------
;       Enter program
;---------------------------------------------------------------------------------------------------------
        .text                           ; program start
        .global _START                  ; define entry point
;---------------------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------------------













;---------------------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------------------
;---------------------------------------------------------------------------------------------------------
START       ; Description: Perform Initialization and proceed to primary procedure
            ; Arguments  : N/A
;---------------------------------------------------------------------------------------------------------
        mov.w #300h,SP               ; Initialize stack pointer (immediate addressing)
        mov.w #WDTPW+WDTHOLD,&WDTCTL ; Stop Watchdog Timer

        bis.b #0x06, &P2DIR          ; BItSet Port 2.1 and Port 2.2 Direction Ctrl as an output
        bis.b #0x00, &P1DIR          ; BItSet Port 1 Direction Ctrl as input

        mov   #0x00, R10
        call  #Init_UART             ; Store PC+2 (MainLoop) and branch to immediate val (Init_UART)

;---------------------------------------------------------------------------------------------------------
;-------------------------------- Toggle Green Or Yellow -------------------------------------------------
;---------------------------------------------------------------------------------------------------------

PreCheck
        call #SelectString      ; Select output String depending on val in R10, stored in R11
        call #PrintDirective    ;  Whatever output string determined in R11, output it

        mov #0x00, R10          ; Reset R10, and use it to figure out which of the switches are being hit

CheckSwitch2                    ; Check switch 2
        and #0x02, P1IN         ; SW2
        jnz Incre2

CheckSwitch1                    ; Check switch 1
        and #0x01, P1IN         ; SW1
        jnz Incre1
        jmp PreCheck
        
Incre2                          ; Increment for sw2 and jmp to appropriate
        add #0x02, R10
        jmp CheckSwitch1
        
Incre1                          ; Increment for sw1 and jmp to appropriate
        add #0x01, R10
        jmp PreCheck

;---------------------------------------------------------------------------------------------------------
;------------------------------- Select String to Print -----------------------------------------------------------
;---------------------------------------------------------------------------------------------------------
SelectString
        cmp.b #0x00,R10         ; SW1 = 0 , SW2 = 0
        jz  LoadA

        cmp.b #0x01,R10         ; SW1 = 1 , SW2 = 0 
        jz  LoadC

        cmp.b #0x02,R10         ; SW1 = 0 , SW2 = 1
        jz  LoadB

        cmp.b #0x03,R10         ; SW1 = 1 , SW2 = 1
        jz  LoadD

LoadA
        mov #sw0_0,R11
        ret
LoadB
        mov #sw0_1,R11
        ret
LoadC
        mov #sw1_0,R11
        ret
LoadD
        mov #sw1_1,R11   
        ret

;---------------------------------------------------------------------------------------------------------








;---------------------------------------------------------------------------------------------------------
;-----------------------------------String Print Procedures ----------------------------------------------
;---------------------------------------------------------------------------------------------------------

;---------------------------------------------------------------------------------------------------------
PrintDirective  ; Description:  Sends character stored in R10 to serial output via UART
                ; Argument   :  R11 ( Must contain address to string )
;---------------------------------------------------------------------------------------------------------
        sub.b #0x00, R11    ; R10 = 0x00?
        jz prepComplete     ; if R10 == 0x00, Prepare Completion


        mov.b @R11, R4      ; Move value at address[R10] to R4
        call  #OUTA_UART    ; Print val in R4

        NOP                 ; No Operation
        inc R11             ; Next character in R10

        jmp PrintDirective  ; Loop

;---------------------------------------------------------------------------------------------------------
prepComplete    ; Description: Prepares program completion then toggles LED yellow indicating completion
                ; Arguments  : N/A
;---------------------------------------------------------------------------------------------------------
        ret

;---------------------------------------------------------------------------------------------------------
;-----------------------------------!END String Print Procedures END!-------------------------------------
;---------------------------------------------------------------------------------------------------------





















;---------------------------------------------------------------------------------------------------------
;------------------------------UART Input/Output Procedures ----------------------------------------------
;---------------------------------------------------------------------------------------------------------

;---------------------------------------------------------------------------------------------------------
Init_UART                               ; Initalize registers for UART
;---------------------------------------------------------------------------------------------------------
        mov.b #0x30, &P2SEL             ; According to schematics for fg4618: P2.4 (TX), P2.5 (RX)
        mov.b #0x00, &UCA0CTL0
        mov.b #0x41, &UCA0CTL1

        mov.b #0x00, &UCA0BR1
        mov.b #0x03, &UCA0BR0

        mov.b #0x06, &UCA0MCTL
        mov.b #0x00, &UCA0STAT
        mov.b #0x40, &UCA0CTL1
        mov.b #0x00, &IE2
        ret


;---------------------------------------------------------------------------------------------------------
INCHAR_UART     ; Save R5. Keep checking RXFlag to see if RXBuffer full.  When it is, move the data from
                ; RXbuffer to R4, restore R5 and return to calling procedure
;---------------------------------------------------------------------------------------------------------
        push R5         ; Preserve current value in R5 by pushing to stack

lpb
        mov.b &IFG2,R5      ; Move BufferFlagReg to R5.  Mem[IFG2] -> R5
        and.b #0x01,R5      ; Isolate val of R5.1 (RXIFG)
        cmp.b #0x00,R5      ; Do R5-0x00
        jz lpb              ; If prev. instruction results in zero jump back

        mov.b &UCA0RXBUF,R4 ; Move Received Data from rx buffer to Register 4
        pop R5              ; Restore former value of R5
        ret                 ; Return to calling procedure


;---------------------------------------------------------------------------------------------------------
OUTA_UART  ; Save R5. Keep checking TXFlag to see if TXBuffer empty. When it is, move the data from
           ; R4 to TXBuffer, restore R5 and return to calling procedure
;---------------------------------------------------------------------------------------------------------
        push R5         ; Preserve current value in R5 by pushing to stack

lpa
        mov.b &IFG2,R5      ; Move BufferFlagReg to R5.  Mem[IFG2] -> R5
        and.b #0x02,R5      ; Isolate val of R5 bit 2
        cmp.b #0x00,R5      ; Do R5-0x00
        jz lpa              ; If prev. instruction results in zero, jump back

        mov.b R4,&UCA0TXBUF ; Move data to transmit from R4 to tx buffer
        pop R5              ; Restore R5
        ret                 ; Return to calling procedure
;---------------------------------------------------------------------------------------------------------
;------------------------------! END UART Input/Output Procedures END! -----------------------------------
;---------------------------------------------------------------------------------------------------------



;---------------------------------------------------------------------------------------------------------
;           Interrupt Vector Assembly Directives
;---------------------------------------------------------------------------------------------------------
        .sect ".reset" ; MSP430 RESET Vector
        .short START   ;
        .end
