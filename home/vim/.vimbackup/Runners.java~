import java.util.ArrayList;
import java.io.IOException;
import java.io.FileReader;
import java.util.Scanner;


public class Runners{
    ArrayList<Vertex[]> allMatrixes ;
    public Runners(){
		allMatrixes = readAllMatrix("infile.txt");
        for ( Vertex[] v : allMatrixes ){
           new Topological(v) ;
        }
    }
	public static ArrayList<Vertex[]>  readAllMatrix(String filename) {
		ArrayList<Integer[][]> aList = new ArrayList<Integer[][]>();
		try {
			Scanner scan = new Scanner(new FileReader(filename)); // Read

			// Get number of graphs in input file
			int numGraphs = Integer.parseInt(scan.nextLine().split("\\s+")[0]);

			// For each graph
			for (int i = 0; i < numGraphs; i++) {
				// read the first two lines containing startVertex and nxn size
				int n_by_n = Integer.parseInt(scan.nextLine().split("\\s+")[0]);

				// Declare/Instantiate multidimensional integer array to hold
				// the adjacency matrix values
				Integer[][] matrix = new Integer[n_by_n][n_by_n];

				// for each line in the given adjacency matrix
				for (int j = 0; j < n_by_n && scan.hasNextLine(); j++) {
					// Read line as one long string, and split at whitespace
					// into an array before assigning to aLine
					String[] aLine = scan.nextLine().split("\\s+");
					// Convert each character element in aLine into an integer
					// and copy into matrix
					for (int k = 0; k < n_by_n; k++) {
						matrix[j][k] = Integer.parseInt(aLine[k]);
					}
				}
				aList.add(matrix);
			}
			scan.close();
		} catch (IOException ex) {
			System.out.println("ERROR IOException");
		}
		System.out.println();
		return toVertex(aList) ;
	}

    public static ArrayList<Vertex[]> toVertex(ArrayList<Integer[][]> aList){
        int d = 0 ;
        ArrayList<Vertex[]> vList = new ArrayList<Vertex[]>();
        while ( d < aList.size() ) {

            Integer[][] matrix = aList.get(d);
            int numVertices = matrix.length;
            Vertex[] G = new Vertex[numVertices] ;

            for ( int i = 0 ; i < numVertices ; i++ ){
                G[i] = new Vertex(i);
            }

            for ( int i = 0 ; i < numVertices ; i++ ){
                for ( int j = 0 ; j < matrix.length ; j++ ){
                    if ( matrix[i][j] == 1 ){
                        G[i].addAdjacent(G[j]);
                    }
                }
            }

            vList.add(G);
            d++ ;
        }
		return vList ;
	}


    public static void main(String[] args){
        new Runners();
    }

}
