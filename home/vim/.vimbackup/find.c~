#include <stdio.h>
#include <stdlib.h>

int find(int * visited,int * matrixR, int index ){
  if ( *(matrixR+index) != -1 ) {
    if ( *( matrixR+index) == 1 && *(visited+index) == 0){
      *(visited+index) = 1 ;
      return index ;
    }
    else {
      return find(visited,matrixR,index+1);
    }
  }

}

int main(){
  int * visited = (int * )  malloc(sizeof(int)*11);
  int * matrixR = (int * )  malloc(sizeof(int)*11);
  int i = 0 ;
  for ( i = 0 ; i < 10 ; i++ ){
    *(visited+i) = 0 ;
    if ( i % 3 == 0 ) *(matrixR+i) = 1 ;
    else *(matrixR+i) = 0 ;
  }
  *(matrixR+10)=-1;
  *(visited+10)=-1;

  int ans = 0 ;

  printf("\n-------------");
  printf("\nBefore");
  printf("\n-------------");
  printf("\nMatrix\n");
  for ( i = 0 ; i < 10 ; i++ ){
    printf("%d ",*(matrixR+i));
  }
  printf("\nVisited\n");
  for ( i = 0 ; i < 10 ; i++ ){
    printf("%d ",*(visited+i));
  }

  printf("\n\n-------------");
  printf("\nSolution");
  printf("\n-------------");
  printf("\nINdexes with 1\n");
  while ( ans != -1 ){
    ans = find(visited,matrixR,0);
    if ( ans != -1 )printf("%d ",ans);
  }

  printf("\n-------------");
  printf("\nAfter");
  printf("\n-------------");
  printf("\nMatrix\n");
  for ( i = 0 ; i < 10 ; i++ ){
    printf("%d ",*(matrixR+i));
  }

  printf("\nVisited\n");
  for ( i = 0 ; i < 10 ; i++ ){
    printf("%d ",*(visited+i));
  }

}



