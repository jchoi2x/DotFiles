import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Stack;

public class Topsort {
	public Stack stk ;
	Vertex[] stkArray ;
	int c ;
	public Topsort(){
		stk = new Stack();
		c = 1 ;
	}
	public void reInit(){
		stk = new Stack();
		c = 1 ;
	}
	public static ArrayList<Integer[][]> readIn(String filename){
		ArrayList<Integer[][]> aList = new ArrayList<Integer[][]>(  );
		try{
			Scanner scan = new Scanner(new FileReader(filename));               // Read from input stream
			int numGraphs = Integer.parseInt(scan.nextLine().split("\\s+")[0]); // First line containing number of graphs

			// For the number of graphs in the input file
			for ( int i = 0 ; i < numGraphs ; i++ ){

				// Read the matrix dimension
				int dimension = Integer.parseInt(scan.nextLine().split("\\s+")[0]);

				// Declare/Instantiate integer array array with dimension prev read
				Integer[][] matrix = new Integer[dimension][dimension];

				// for each line in the given adjacency matrix
				for ( int j = 0 ; j < dimension && scan.hasNextLine() ; j++ ){

					// Read line as one long string and split at whitespace into an array before assigning to aLine
					String[] aLine = scan.nextLine().split("\\s+");

					// Convert each character element in aLine into an integer and copy into matrix
					for ( int k = 0 ; k < dimension ; k++ ){
						matrix[j][k] = Integer.parseInt(aLine[k]);
					}
				}
				// append to aList
				aList.add(matrix);
			}
			// Return arrayList containing all matrixes in integer
		}catch (IOException ex){
			System.out.println("Error with inputfile");
		}
		return aList ;
	}

	public static Vertex[] toVertex(Integer[][] matrix){

		int numVertex = matrix.length ;

		Vertex[] V = new Vertex[numVertex + 1];

		for ( int i = 0 ; i < matrix.length ; i++){
			V[i] = new Vertex( (char)('0'+ i));
		}

		for ( int i = 0 ; i < matrix.length ; i++ ){
			for ( int j = 0 ; j < matrix.length ; j++ ){
				if ( matrix[i][j] == 1 ){
					V[i].setOuts(V[j]);
				}
			}
		}
		return V ;
	}

	public Stack getStack(){
		return stk ;
	}
	public void dfs(Vertex v) {
		System.out.println("Visiting "+v.getName());
		//mark v visited
		v.setVisited();
		//get the number of OUT(V)
		int numouts = v.getOutsNum();

		//copies v.getOuts(i), the out vertices of v, to a temporary array outs[i]
		Vertex [] outs = new Vertex[numouts+1];
		for (int i = 0; i < numouts; i++) outs[i]=v.getOuts(i);

		//for each w in OUT(v) do
		for (int i = 0; i< numouts; i++) {
			Vertex w = outs[i];
			//System.out.println(v.getName()+" now looks at "+w.getName());

			//if w is unvisited then dfs(w)
			if(!w.isVisited()) {
				dfs(w);
			}
		}
		//push(v) into STACK
		stk.push(v);
		//System.out.println("STACK: "+v.getName()+" pushed");
	}

	public void dfsCaller(Vertex[] V){
		int numVertex = V.length-1 ;

		// Check
		/*
		for ( int i = 0 ; i < numVertex ; i++ ){
			System.out.print(V[i].getName()+"=>");
			for (int j = 0 ; j< V[i].getOutsNum() ; j++) {
				System.out.print(V[i].getOuts(j).getName()+",");
			}
			System.out.println();
		}
		*/
		// While unvisited vertices
		int i = 0 ;
		while ( i < numVertex ){
			for ( i = 0 ; i < numVertex ; i++){
				if ( !V[i].isVisited() ){
					dfs(V[i]);
				}
			}
		}

		i = 0 ;
		while ( i < numVertex ){
			Vertex v = (Vertex) getStack().pop();
			i++ ;
			System.out.printf( "%c, ", v.getName() );
		}

	}

	public static void main(String[] args){
		Topsort ts = new Topsort();
		ArrayList<Integer[][]> aList = readIn( "infile.txt" );

		// For each graph

		for ( Integer[][] graph : aList ) {
			// Convert the graph
			Vertex[] V = toVertex( graph );
			ts.dfsCaller( V );
		}
	}
}

